#!/usr/bin/env python3
#
# CIP Core, generic profile
#
# Copyright (c) Siemens AG, 2023
#
# Authors:
#  Quirin Gylstorff <quirin.gylstorff@siemens.com>
#
# SPDX-License-Identifier: MIT

import json
import libconf
import argparse
from os import path
from sys import exit


def convert_lists_to_tuples(obj):
    if isinstance(obj, list):
        return tuple(obj)
    elif isinstance(obj, dict):
        return {key: convert_lists_to_tuples(value) for key, value in obj.items()}
    else:
        return obj


def convert_json_to_libconfig(input_file, output_file):
    if not path.exists(input_file):
        print(f"Error: The file {input_file} does not exists. Abort!")
        exit(1)

    with open(input_file, "r") as json_fd:
        json_obj = json.load(json_fd)

    converted_json_obj = convert_lists_to_tuples(json_obj)

    libconf_data = libconf.dumps(converted_json_obj)
    if output_file:
        with open(output_file, "w") as libconf_fd:
            libconf_fd.write(libconf_data)
    else:
        print(libconf_data)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Convert a json file to a libconfig file"
    )
    parser.add_argument("input_file", help="Input JSON file name")
    parser.add_argument("--output_file", help="Output libconfig file name")

    args = parser.parse_args()
    convert_json_to_libconfig(args.input_file, args.output_file)
