#!/bin/sh
#
# CIP Core, generic profile
#
# Copyright (c) Siemens AG, 2023
#
# Authors:
#  Quirin Gylstorff <quirin.gylstorff@siemens.com>
#
# SPDX-License-Identifier: MIT

prereqs()
{
	# Make sure that this script is run last in local-top
	local req
	for req in "${0%/*}"/*; do
		script="${req##*/}"
		if [ "$script" != "${0##*/}" ]; then
			printf '%s\n' "$script"
		fi
	done
}
case $1 in
prereqs)
	prereqs
	exit 0
	;;
esac

. /scripts/functions

# get configuration variables
. /usr/share/encrypt_partition/encrypt_partition.env

# load necessary kernel modules:
modprobe tpm_tis
modprobe tpm_crb

# fixed tpm device or do we need to find it
tpm_device=/dev/tpmrm0
partition_sets="$PARTITIONS"
create_file_system_cmd="$CREATE_FILE_SYSTEM_CMD"

if [ -z "${create_file_system_cmd}" ]; then
	create_file_system_cmd="mke2fs -t ext4"
fi

service_watchdog() {
	for n in $(seq $(($SETUP_TIMEOUT / 10)) ); do
		printf '\0'
		sleep 10
	done > "$WATCHDOG_DEV"
}

open_tpm2_partition() {
	if ! /usr/bin/clevis luks unlock -n "$crypt_mount_name" \
		 -d "$1"; then
		panic "Can't decrypt '$1' !"
	fi
}

enroll_tpm2_token() {
	if [ -x /usr/bin/clevis ]; then
		 clevis luks bind -d "$1" tpm2 '{"pcr_ids":"7"}' < "$2"
	else
		panic "clevis not available cannot enroll tpm2 key!"
	fi
}

reencrypt_existing_partition() {
	part_size_blocks="$(cat /sys/class/block/"$(awk -v dev="$1" 'BEGIN{split(dev,a,"/"); print a[3]}' )"/size)"
	# reduce the filesystem and partition by 32M to fit the LUKS header
	reduce_device_size=32768
	reduced_size="$(expr "$part_size_blocks" - 65536 )"
	reduced_size_in_byte="$(expr "$reduced_size" \* 512)"
	reduced_size_in_kb="$(expr "$reduced_size_in_byte" / 1024)K"
	resize2fs "$1" "${reduced_size_in_kb}"
	if [ -x /usr/sbin/cryptsetup-reencrypt ]; then
		/usr/sbin/cryptsetup-reencrypt --new --reduce-device-size "$reduce_device_size"k "$1" < "$2"
	else
		/usr/sbin/cryptsetup reencrypt --encrypt --reduce-device-size "$reduce_device_size"k "$1" < "$2"
	fi
}

if [ ! -e "$tpm_device" ]; then
	panic "tpm device '$tpm_device' does not exists - cannot create a encrypted device!"
fi

# clevis needs /dev/fd create it in the initramfs
if [ ! -e /dev/fd ]; then
	ln -s /proc/self/fd /dev/fd
fi

for partition_set in $partition_sets; do
	partition_label="$(awk -v var="$partition_set" 'BEGIN{split(var,a,":"); print a[1]}')"
	partition_mountpoint="$(awk -v var="$partition_set" 'BEGIN{split(var,a,":"); print a[2]}')"
	partition_format="$(awk -v var="$partition_set" 'BEGIN{split(var,a,":"); print a[3]}')"
	partition=/dev/disk/by-partlabel/"$partition_label"
	crypt_mount_name="encrypted_$partition_label"
	decrypted_part=/dev/mapper/"$crypt_mount_name"
	# clevis does not work with links in /dev/disk*
	part_device=$(readlink -f "$partition")

	if /usr/sbin/cryptsetup luksDump --batch-mode "$partition" \
			| grep -q "clevis"; then
		open_tpm2_partition "$part_device"
		if ! mount -t "$(get_fstype "${decrypted_part}")" "${decrypted_part}" \
			 "${rootmnt}${partition_mountpoint}"; then
			panic "Can't mount encrypted partition '${decrypted_part}'!"
		fi
		continue
	fi

	# service watchdog in the background during lengthy re-encryption
	if [ -z "$watchdog_pid" ]; then
		service_watchdog &
		watchdog_pid=$!
	fi

	# create random password for initial encryption
	# this will be dropped after reboot
	tmp_key=/tmp/"$partition_label-lukskey"
	openssl rand -base64 32 > "$tmp_key"

	case "${partition_format}" in
		"reencrypt")
			reencrypt_existing_partition "$part_device" "$tmp_key"
			enroll_tpm2_token "$part_device" "$tmp_key"
			open_tpm2_partition "$part_device"
		;;
		"format")
			/usr/sbin/cryptsetup luksFormat --batch-mode \
				 --type luks2 "$partition" < "$tmp_key"
			enroll_tpm2_token "$part_device" "$tmp_key"
			open_tpm2_partition "$part_device"
			eval "${create_file_system_cmd} ${decrypted_part}"
		;;
		*)
			panic "Unknown value ${partition_format}. Cannot create a encrypted partition !"
		 ;;
	esac

	if ! mount -t "$(get_fstype "${decrypted_part}")" "${decrypted_part}" \
		 "${rootmnt}${partition_mountpoint}"; then
		panic "Can't mount encrypted partition '${decrypted_part}'!"
	fi

	# delete initial key
	# afterwards no new keys can be enrolled
	cryptsetup -v luksKillSlot -q  "$part_device" 0
done

if [ -n "$watchdog_pid" ]; then
	kill "$watchdog_pid"
fi
