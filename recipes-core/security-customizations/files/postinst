#!/bin/sh
#
# CIP Security, generic profile
# Security Package configurations
#

set -e

echo "CIP Core Security Image (login: root/CIPsecurity@123)" > /etc/issue

# CR1.7: Strength of password-based authentication
# Pam configuration to  enforce password strength
PAM_PWD_FILE="/etc/pam.d/common-password"
if grep -c "pam_passwdqc.so" "${PAM_PWD_FILE}";then
	# Password strength is defined as it should have atleast 8 characters length and with 4 character classes (uppercase, lowercase, digit and other characters)
	# Same is set in passwdqc configuration with `min=N0,N1,N2,N3,N4`
	# N0, N1, N3  are disabled, to not to accept password with only one, two or three character classes
	# N2 is disabled for passphrases since we have no restriction for the minimum length of passphrase.
	# N4 is set to 8 to accept the passowrd length atleast 8 characters and with four character class combinations.
        pam_passwdqc_config="password    requisite    pam_passwdqc.so min=disabled,disabled,disabled,disabled,8 similar=deny random=0 enforce=everyone retry=3"
        sed -i '/pam_passwdqc.so/ s/^#*/#/'  "${PAM_PWD_FILE}"
        sed -i "0,/^password.*/s/^password.*/${pam_passwdqc_config}\n&/" "${PAM_PWD_FILE}"
elif grep -c "pam_cracklib.so" "${PAM_PWD_FILE}";then
        pam_cracklib_config="password  requisite    pam_cracklib.so retry=3 minlen=8 maxrepeat=3 ucredit=-1 lcredit=-1 dcredit=-1 ocredit=-1  difok=3 gecoscheck=1 reject_username  enforce_for_root"
        sed -i '/pam_cracklib.so/ s/^#*/#/'  "${PAM_PWD_FILE}"
        sed -i "0,/^password.*/s/^password.*/${pam_cracklib_config}\n&/" "${PAM_PWD_FILE}"
else
        echo "No suitable pam module found to enforce password strength"
fi

# CR1.11: Unsuccessful login attempts
# Lock user account after unsuccessful login attempts
PAM_AUTH_FILE="/etc/pam.d/common-auth"
# pam_tally2 is deprecated from pam version 1.4.0-7
if readlink -f /lib/*-linux-gnu*/security/pam_tally2.so; then
       PAM_MODULE="pam_tally2.so"
       PAM_CONFIG="auth   required  pam_tally2.so  deny=3 even_deny_root unlock_time=60 root_unlock_time=60
                 \naccount required pam_tally2.so"
elif readlink -f /lib/*-linux-gnu*/security/pam_faillock.so; then
       PAM_MODULE="pam_faillock.so"
       PAM_CONFIG="auth   required  pam_faillock.so preauth silent  deny=3 even_deny_root unlock_time=60 root_unlock_time=60 \
               \nauth   required  pam_faillock.so .so authfail deny=3 even_deny_root unlock_time=60 root_unlock_time=60 \
               \naccount required pam_faillock.so"
else
       echo "No suitable pam module found to lock failed login attempts"
       exit 1
fi

if grep -c "${PAM_MODULE}" "${PAM_AUTH_FILE}";then
        sed -i '/${PAM_MODULE}/ s/^#*/#/'  "${PAM_AUTH_FILE}"
fi
sed -i "0,/^auth.*/s/^auth.*/${PAM_CONFIG}\n&/" "${PAM_AUTH_FILE}"

# CR2.7: Concurrent session control
# Limit the concurrent login sessions
LIMITS_CONFIG="/etc/security/limits.conf"
echo "* hard maxlogins 2" >> ${LIMITS_CONFIG}

# CR2.9: Audit storage capacity
# CR2.9 RE-1: Warn when audit record storage capacity threshold reached
AUDIT_CONF_FILE="/etc/audit/auditd.conf"
sed -i 's/space_left_action = .*/space_left_action = SYSLOG/'  $AUDIT_CONF_FILE
sed -i 's/admin_space_left_action = .*/admin_space_left_action = SYSLOG/' $AUDIT_CONF_FILE

# CR2.10: Response to audit processing failures
sed -i 's/disk_error_action = .*/disk_error_action = SYSLOG/' $AUDIT_CONF_FILE

# CR2.11: Enable Mutli Factor Authentication for Local and Remote Session
SSHD_AUTH_CONFIG="/etc/pam.d/common-auth"
google_authenticator="auth required pam_google_authenticator.so nullok"
if grep -c "pam_google_authenticator.so" "${SSHD_AUTH_CONFIG}";then
        sed -i '/pam_google_authenticator.so/ s/^#*/#/'  "${SSHD_AUTH_CONFIG}"
fi
echo "auth required pam_google_authenticator.so nullok" | tee -a "${SSHD_AUTH_CONFIG}"

